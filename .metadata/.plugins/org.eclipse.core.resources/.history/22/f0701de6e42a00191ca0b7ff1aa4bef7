package no.hvl.dat102.SirkulaerKoe;
import no.hvl.dat102.exception.EmptyCollectionException;
import no.hvl.dat102.adt.KoeADT;

public class SirKoe<T> implements KoeADT<T> {

	private static final int STDK  = 100; 
	private int front, bak, antall; 
	private T[] koe; 
	
	public SirKoe() {
		this(STDK); 
	}
	public SirKoe(int startKapasitet) {
		koe = (T[]) (new Object[startKapasitet]));
		front = bak = 0; 
		antall = 0; 
	}
	
	
	@Override
	public void innKoe(T element) {
		
		if(antall() == SirKoe.length) {
			utvid(); 
		}
		SirKoe[bak]= element; 
		bak = (bak+1)%SirKoe.length; 
		antall++;
	}


	@Override
	public T utKoe() {
		
		if(erTom()) {
			throw new EmptyCollectionException("koe");
		}
		T resultat = SirKoe[front]; 
		SirKoe[front]=null;
		front = (front + 1)%SirKoe.length; 
		antall--;
		return resultat; 
	}

	@Override
	public T foerste() {
		
		if(erTom())
			throw new EmptyCollectionException("koe");
		
		T resultat = SirKoe[front];
		
		return resultat;
	}

	@Override
	public boolean erTom() {
		
		return antall == 0; 
	}

	@Override
	public int antall() {
		
		return antall;
	}
	
	//Hjelpemetode
	private void utvid() {
		T[] hjelpetabell= (T[])(new Object[SirKoe.length*2]);
		for(int soek = 0; soek<antall; soek++) {
			hjelpetabell[soek] = SirKoe[front];
			front = (front+1)%SirKoe.length; 
		}
		front = 0; 
		bak = antall; 
		SirKoe = hjelpetabell; 
		
		
	}
}
